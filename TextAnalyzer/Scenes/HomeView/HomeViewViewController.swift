//
//  HomeViewViewController.swift
//  TextAnalyzer
//
//  Created by Francis Breidenbach on 12/18/17.
//  Copyright (c) 2017 Francis Breidenbach. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import NVActivityIndicatorView

protocol HomeViewDisplayLogic: class {
  func displayAnalysis(viewModel: HomeView.AnalyzeText.ViewModel)
}

class HomeViewViewController: UIViewController, HomeViewDisplayLogic {
  
  // MARK: - Outlets
  
  @IBOutlet var instructionLabel: UILabel!
  @IBOutlet var mainTextField: UITextField!
  @IBOutlet var analyzeButton: UIButton!
  
  @IBOutlet var spinnerView: NVActivityIndicatorView!
  
  // MARK: - Properties
  
  var interactor: HomeViewBusinessLogic?
  var router: (NSObjectProtocol & HomeViewRoutingLogic & HomeViewDataPassing)?
  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = HomeViewInteractor()
    let presenter = HomeViewPresenter()
    let router = HomeViewRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    guard segue.identifier == "ShowAnalysis",
      let destinationVC = segue.destination as? ShowAnalysisViewController else { return }
    
    let route = NSSelectorFromString("routeToShowAnalysisWithSegue:")
    
    if let router = router, router.responds(to: route) {
      router.perform(route, with: segue)
    }
    
    //    if let scene = segue.identifier {
    //      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
    //      if let router = router, router.responds(to: selector) {
    //        router.perform(selector, with: segue)
    //      }
    //    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    
    
  }
  
  // MARK: - Analyze Text
  
  @IBAction func analyzeText() {
    //    spinnerView.isAnimating ? spinnerView.stopAnimating() : spinnerView.startAnimating()
    startAnalyzing()
  }
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func startAnalyzing() {
    spinnerView.startAnimating()
    
    guard let text = mainTextField.text, text.count > 0 else {
      instructionLabel.text = "Invalid entry. Enter text to analyze..."
      spinnerView.stopAnimating()
      return
    }
    
    let request = HomeView.AnalyzeText.Request(text: text)
    interactor?.analyzeSentiment(request: request)
  }
  
  func displayAnalysis(viewModel: HomeView.AnalyzeText.ViewModel) {
    guard viewModel.analysis.sentences.count > 0 else {
      spinnerView.stopAnimating()
      instructionLabel.text = "Analysis doesn't look correct. Try again."
      print("FAIL: Sentiment fetch didn't work.")
      return
    }
    
    instructionLabel.text = "Success! Preparing analysis ..."
    
    DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 2) {
      self.spinnerView.stopAnimating()
      self.performSegue(withIdentifier: "ShowAnalysis", sender: nil)
    }
    
    // Print analysis to console -- REPLACE THIS
    print("Success! Overall: \(viewModel.analysis.overall)")
    viewModel.analysis.sentences.forEach { sentence in
      print("Success! sentence: \(sentence)")
    }
  }
  
  //  func showResults(results: Analysis) {
  //    guard let router = router else { return }
  //    router.r
  //  }
}
